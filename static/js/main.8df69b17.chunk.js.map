{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","props","addMovie","useState","query","setQuery","uploadedMovie","setUploadedMovie","movieIsUploading","setMovieIsUploading","hasError","setHasError","htmlFor","type","id","placeholder","value","onChange","event","target","classNames","onClick","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","response","Promise","reject","Poster","Title","Plot","imdbID","resolve","error","finally","disabled","length","App","setMovies","every","item","collection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8df69b17.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  addMovie: (arg: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = (props) => {\n  const { addMovie } = props;\n\n  const [query, setQuery] = useState('');\n  const [uploadedMovie, setUploadedMovie] = useState<Movie | null>(null);\n  const [movieIsUploading, setMovieIsUploading] = useState(false);\n  const [hasError, setHasError] = useState('');\n\n  const findMovie = (event: FormEvent) => {\n    event.preventDefault();\n    setMovieIsUploading(true);\n\n    getMovie(query)\n      .then(response => {\n        if ('Error' in response) {\n          return Promise.reject(response.Error);\n        }\n\n        const {\n          Poster,\n          Title,\n          Plot,\n          imdbID,\n        } = response;\n\n        setUploadedMovie({\n          title: Title,\n          description: Plot,\n          imgUrl: Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : Poster,\n          imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n          imdbId: imdbID,\n        });\n\n        return Promise.resolve();\n      })\n      .catch(error => setHasError(error))\n      .finally(() => setMovieIsUploading(false));\n\n    setQuery('');\n    setHasError('');\n  };\n\n  const addMovieToTheCollection = () => {\n    if (uploadedMovie) {\n      addMovie(uploadedMovie);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setHasError('');\n              }}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light', { 'is-loading': movieIsUploading },\n              )}\n              onClick={findMovie}\n              disabled={query.length < 1}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {uploadedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addMovieToTheCollection();\n                  setUploadedMovie(null);\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {uploadedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={uploadedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=dc91233';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    if (movies.every(item => item.imdbId !== movie.imdbId)) {\n      setMovies(collection => [...collection, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}